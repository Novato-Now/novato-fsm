// Code generated by MockGen. DO NOT EDIT.
// Source: action.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_action.go -package=mocks -source=action.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	errors "github.com/thevibegod/fsm/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockAction is a mock of Action interface.
type MockAction struct {
	ctrl     *gomock.Controller
	recorder *MockActionMockRecorder
}

// MockActionMockRecorder is the mock recorder for MockAction.
type MockActionMockRecorder struct {
	mock *MockAction
}

// NewMockAction creates a new mock instance.
func NewMockAction(ctrl *gomock.Controller) *MockAction {
	mock := &MockAction{ctrl: ctrl}
	mock.recorder = &MockActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAction) EXPECT() *MockActionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockAction) Execute(ctx context.Context, jID string, journeyData, data any) (any, any, string, *errors.FsmError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, jID, journeyData, data)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(any)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(*errors.FsmError)
	return ret0, ret1, ret2, ret3
}

// Execute indicates an expected call of Execute.
func (mr *MockActionMockRecorder) Execute(ctx, jID, journeyData, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockAction)(nil).Execute), ctx, jID, journeyData, data)
}
