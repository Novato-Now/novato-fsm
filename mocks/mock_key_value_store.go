// Code generated by MockGen. DO NOT EDIT.
// Source: key_value_store.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_key_value_store.go -package=mocks -source=key_value_store.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Novato-Now/novato-fsm/model"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyValueStore is a mock of KeyValueStore interface.
type MockKeyValueStore[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStoreMockRecorder[T]
}

// MockKeyValueStoreMockRecorder is the mock recorder for MockKeyValueStore.
type MockKeyValueStoreMockRecorder[T any] struct {
	mock *MockKeyValueStore[T]
}

// NewMockKeyValueStore creates a new mock instance.
func NewMockKeyValueStore[T any](ctrl *gomock.Controller) *MockKeyValueStore[T] {
	mock := &MockKeyValueStore[T]{ctrl: ctrl}
	mock.recorder = &MockKeyValueStoreMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueStore[T]) EXPECT() *MockKeyValueStoreMockRecorder[T] {
	return m.recorder
}

// Del mocks base method.
func (m *MockKeyValueStore[T]) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockKeyValueStoreMockRecorder[T]) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockKeyValueStore[T])(nil).Del), ctx, key)
}

// Get mocks base method.
func (m *MockKeyValueStore[T]) Get(ctx context.Context, key string) (*model.Journey[T], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*model.Journey[T])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyValueStoreMockRecorder[T]) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStore[T])(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockKeyValueStore[T]) Set(ctx context.Context, key string, Value model.Journey[T]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, Value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockKeyValueStoreMockRecorder[T]) Set(ctx, key, Value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKeyValueStore[T])(nil).Set), ctx, key, Value)
}
