// Code generated by MockGen. DO NOT EDIT.
// Source: fsm_service.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_fsm_service.go -package=mocks -source=fsm_service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	novato_errors "github.com/Novato-Now/novato-utils/errors"
	model "github.com/thevibegod/fsm/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFsmService is a mock of FsmService interface.
type MockFsmService[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockFsmServiceMockRecorder[T]
}

// MockFsmServiceMockRecorder is the mock recorder for MockFsmService.
type MockFsmServiceMockRecorder[T any] struct {
	mock *MockFsmService[T]
}

// NewMockFsmService creates a new mock instance.
func NewMockFsmService[T any](ctrl *gomock.Controller) *MockFsmService[T] {
	mock := &MockFsmService[T]{ctrl: ctrl}
	mock.recorder = &MockFsmServiceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFsmService[T]) EXPECT() *MockFsmServiceMockRecorder[T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockFsmService[T]) Execute(ctx context.Context, request model.FsmRequest) (model.FsmResponse, *novato_errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, request)
	ret0, _ := ret[0].(model.FsmResponse)
	ret1, _ := ret[1].(*novato_errors.Error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockFsmServiceMockRecorder[T]) Execute(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockFsmService[T])(nil).Execute), ctx, request)
}
